# Windsurf Rules

## Table of Contents

- [1. Code Quality](#code-quality)
- [2. Next.js Practices](#nextjs-practices)
- [3. Performance](#performance)
- [4. Accessibility](#accessibility)
- [5. Security](#security)
- [6. Deployment](#deployment)
- [7. Testing](#testing)
- [8. Dependencies](#dependencies)
- [9. Documentation](#documentation)
- [10. Automation Tools](#automation-tools)
- [11. Deployment Checklist](#deployment-checklist)

### Code Quality

- [ ] **TypeScript**: Verify typing in critical modules (NextAuth.js, Supabase, React Query).
  - **Why**: Ensures type safety and reduces runtime errors.
  - **How**: Run TypeScript compiler checks and review type definitions.
  - **Resources**: [TypeScript Documentation](https://www.typescriptlang.org/docs/)

- [ ] **Clean Code**: Remove unused variables/imports, especially in dashboard components.
  - **Why**: Improves readability and maintainability.
  - **How**: Use ESLint to identify and fix issues.

- [ ] **Styling**: Ensure Prettier/ESLint compliance project-wide.
  - **Why**: Maintains consistent code formatting.
  - **How**: Run Prettier and ESLint as part of the pre-commit hook.

### Next.js Practices

- [ ] **App Router**: Verify correct use of client/server components.
- [ ] **Error Handling**: Implement boundaries & loading states in data-heavy components.
- [ ] **API Routes**: Secure, validate, and type all Vercel Serverless Functions.

### Performance

- [ ] **Optimize Re-renders**: Audit state-heavy components.
- [ ] **Assets**: Use `next/image`, compress large files.
- [ ] **Cleanup**: Verify proper disposal of listeners, timeouts, subscriptions.

### Accessibility

- [ ] **Keyboard Navigation**: Ensure all interactive elements are accessible.
- [ ] **ARIA & Alt Text**: Add to icons and components.
- [ ] **Color Contrast**: Validate for dark/light mode compliance.

### Security

- [ ] **Data Protection**: Prevent exposure of sensitive information.
- [ ] **Input Validation**: Sanitize all form inputs.

### Deployment

- [ ] **Vercel**: Configure caching headers & deployment settings.
- [ ] **Environment**: Verify `.env.example` and required credentials.
- [ ] **Error Handling**: Implement for critical user flows.

### Testing

- [ ] **Unit & Integration**: Cover untested core modules.
- [ ] **E2E**: Ensure full coverage of critical flows.

### Dependencies

- [ ] **Update**: Ensure stable versions of key packages.
- [ ] **Audit**: Check for security vulnerabilities.
- [ ] **Scripts**: Verify build, deployment, and testing configurations.

### Documentation

- [ ] **README**: Update tech stack, setup instructions, new features.
- [ ] **Examples**: Add relevant code snippets and API route examples.
- [ ] **Markdown**: Avoid code blocks in documentation.

### Automation Tools

- [ ] **Husky**: Pre-commit hooks for linting and formatting.
- [ ] **GitHub Actions/CI**: Automated testing and deployment pipelines.
- [ ] **Dependabot**: Automated dependency updates.
- [ ] **Sentry**: Error tracking and monitoring.

### Deployment Checklist

1. [ ] Verify **environment variables** are correctly set.
2. [ ] Ensure **caching headers** are configured for static assets.
3. [ ] Test **error boundaries** and fallback UI.
4. [ ] Validate **API rate limiting** and security headers.
5. [ ] Confirm **database backups** are enabled.